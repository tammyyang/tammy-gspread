#!/usr/bin/env python

import sys
import argparse
import os
import logging
import gspread
import time
from datetime import date, timedelta
from ConfigParser import SafeConfigParser

CONFIGPATH = os.path.join(os.environ["HOME"], ".gspread_diary/config")
COMPLETED = ['Done', 'Cancelled', 'Drop']

class _CONFIG_HANDLER:
    def __init__(self):
        self.scp = SafeConfigParser()
        self.today = str(date.today())

    def read(self):
        self.scp.read(CONFIGPATH)
        if self.scp.get('last-modified', 'date') == self.today:
            return True, self.scp.get('last-modified', 'row')
        else:
            self.write(['last-modified', 'date', self.today])
            return False, self.today

    def get_last_date(self):
        if date.today().weekday() == 0:
            return str(date.today() - timedelta(3))
        else:
            return str(date.today() - timedelta(1))

    def get_today(self):
        return self.today

    def write(self, content):
        self.scp.set(content[0], content[1], content[2])

    def save(self):
        with open(CONFIGPATH, 'wb') as configfile:
            self.scp.write(configfile)

class _GSHEET_HANDLER:
    def __init__(self, username, passwd, key):
        self.gc = gspread.login(username, passwd)
        self.sheet = self.gc.open_by_key(key)

    def get_sheet_by_title(self, title):
        return self.sheet.worksheet(title)

    def get_sheet_by_index(self, index):
        return self.sheet.get_worksheet(index)

    def new_sheet(self, title="", rows="20", cols="5"):
        return self.sheet.add_worksheet(title=title, rows=rows, cols=cols) 

    def get_col_contents(self, wks):
        contents_dic = {}
        contents_dic['timestamp'] = wks.col_values(1)
        contents_dic['category'] = wks.col_values(2)
        contents_dic['item'] = wks.col_values(3)
        return contents_dic

    def add_item(self, wks, row_index, contents):
        def check_lp(input_string):
            if input_string[0:3] == 'lp:':
                return ''.join(['=hyperlink(\"http://launchpad.net/bugs/', input_string[3:10],'\",\"lp:', input_string[3:],'\")'])
            return input_string
        _row_index = str(row_index)
        wks.update_acell('A'+ _row_index, time.strftime("%H:%M:%S", time.localtime()))
        wks.update_acell('B'+ _row_index, contents[0])
        wks.update_acell('C'+ _row_index, check_lp(contents[1]))


def main():

    parser = argparse.ArgumentParser(description='A tool to update the working diary')
    parser.add_argument('-a','--account',
            default=ACCOUNT, help='Your Google account.')
    parser.add_argument('-d','--done',
            default="", help='Update what you have done.')
    parser.add_argument('-p','--passwd',
            default=None, help='Your password of Google account.')
    parser.add_argument('-k','--key',
            default="0ApMQND2fzJEVdFptblF3V1psallwZll3b0k1bk91RHc", help='Key of the spreadsheet you want to open.')
    parser.add_argument('-c','--category', type=int,
            default=0, help='0: Done 1: Later 2: Tomorrow.')
    parser.add_argument('-l','--lastday', 
            default=None, help='Specify the last date you use it.')
    parser.add_argument('-s','--sheet', type=int,
            default=0, help='Which sheet index do you want to open?')
    parser.add_argument('--debug', action="store_const", const=logging.DEBUG ,
            default=logging.CRITICAL, help='Debugging level (default: 0)')
    args = parser.parse_args()
    logging.basicConfig(level=args.debug,
        format='%(asctime)s %(levelname)s %(message)s')
    
    cfgclass = _CONFIG_HANDLER()
    gsheetclass = _GSHEET_HANDLER(args.account, args.passwd, args.key)
    find_today, cfg_value = cfgclass.read()
    today = cfgclass.get_today()

    if find_today:
        wks = gsheetclass.get_sheet_by_title(today)
        row_index = int(cfg_value)+1
    else:
        if args.lastday == None:
            last_date = cfgclass.get_last_date()
        else:
            last_date = args.lastday
        wks_yesterday = gsheetclass.get_sheet_by_title(last_date) #This needs to be done before a new sheet is created
        wks = gsheetclass.new_sheet(title=cfg_value, rows="30", cols="5")
        row_index = 1
        yes_contents = gsheetclass.get_col_contents(gsheetclass.get_sheet_by_title(last_date))
        undo_counter = 0
        for row in range(0, len(yes_contents['timestamp'])):
            if yes_contents['category'][row] not in COMPLETED:
                gsheetclass.add_item(wks, row_index, [yes_contents['category'][row], yes_contents['item'][row]])
                row_index = row_index+1
    gsheetclass.add_item(wks, row_index, [{0:'Done', 1:'Today', 2:'Later'}[args.category], args.done])

    cfgclass.write(['last-modified', 'row', str(row_index)])
    cfgclass.save()

if __name__ == "__main__":
    main()
